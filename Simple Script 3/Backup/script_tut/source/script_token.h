/******************************************************************
 * File: source//script_token.h
 *
 * This file was automatically generated by CppCC Version 0.0.6
 * DO NOT EDIT MANUALLY
 ******************************************************************/


#ifndef __SCRIPT_TOKEN_HH__
#define __SCRIPT_TOKEN_HH__

#include <string>
#include <sstream>

#include <iostream>
#include <math.h> // für atoi()
using namespace std;


namespace script_tut
{

class Position
{
  public:
    Position () : ln(0), col(0) {}
    Position (int ln_, int col_) : ln(ln_), col(col_) {}
    Position (const Position &o) : ln(o.ln), col(o.col) {}
    
    operator std::string () const
    {
      std::ostringstream oss;
      oss << ln << ":" << col;
      return oss.str();
    }
    
    int ln, col;
};

class scriptToken
{
  friend class scriptScanner;
  public:
    
    scriptToken () : _img_valid(true) {}
    scriptToken (int id_, const std::string &_str_img_, 
              const Position &bPos_, const Position &ePos_) :
      _str_img(_str_img_), _img_valid(true), id(id_), bPos(bPos_), ePos(ePos_)
    {}
    scriptToken (int id_, const Position &bPos_, const Position &ePos_) :
      _img_valid(true), id(id_), bPos(bPos_), ePos(ePos_)
    {}
    scriptToken (int id_) : 
      _img_valid(true), id(id_)
    {}
    scriptToken (const std::string &_str_img_) : 
      _str_img(_str_img_), _img_valid(true)
    { length = _str_img.length(); }
    scriptToken (int id_, const Position &bPos_) :
      _img_valid(true), id(id_), bPos(bPos_), ePos(bPos_)
    {}
  
  public:
    Position bPos, ePos;
    int id;
    int length;
    std::string& image()
    {
      _cacheImg();
      return _str_img;
    }
  
  private:
    const char *_img_start; //points into the scanner's buffer
    bool _img_valid; //true if the string image is in sync with the buffer
    std::string _str_img; //caches the image as a string
    
    void _set (int id_, const Position &bPos_, const Position &ePos_,
               const char *_img_start_, int length_)
    {
      id = id_; bPos = bPos_; ePos = ePos_;
      _img_start = _img_start_; length = length_;
      _img_valid = false;
    }
    
    void _set (const char *_img_start_, int length_)
    {
      _img_start = _img_start_; length = length_;
      _img_valid = false;
    }
    void _cacheImg()
    {
      if (!_img_valid) {
        _str_img.assign(_img_start, length);
        _img_valid = true;
      }
    }
    
  private: // user code
  
	public:
	// Variablen, auf die der Kommunikation
	// Scanner => Parser dienen.
	
	// ein identifier-string
	std::string identifier;
	
	// ein var-name string
	std::string varName;
	
	// ein string-string
	std::string stringValue;
	
	// integer-value
	int intValue;


  
   /* Token id constants: */
  public:
  
    static const int eof;
    static const int ws;
    static const int SHORT_COMMENT;
    static const int eol;
    static const int IF;
    static const int ELSE;
    static const int L_PAR;
    static const int R_PAR;
    static const int L_CURLY;
    static const int R_CURLY;
    static const int COMMA;
    static const int SEMICOLON;
    static const int ASSIGN;
    static const int EQUAL;
    static const int NEQUAL;
    static const int ADD;
    static const int SUB;
    static const int MULT;
    static const int DIV;
    static const int CONCAT;
    static const int LOGIC_OR;
    static const int LOGIC_AND;
    static const int IDENTIFIER;
    static const int VAR_NAME;
    static const int DECIMAL;
    static const int STRING;
    
}; // end of scriptToken class


} // end namespace script_tut
#endif // ifndef __SCRIPT_TOKEN_HH__


/* End of file. */
