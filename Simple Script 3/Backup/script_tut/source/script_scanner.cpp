/******************************************************************
 * File: source//script_scanner.cpp
 *
 * This file was automatically generated by CppCC Version 0.0.6
 * DO NOT EDIT MANUALLY
 ******************************************************************/



#include "script_scanner.h"

const int script_tut::scriptScanner::START = 0;

void script_tut::scriptScanner::_brefill ()
{
  if (!*inputStream) {
    ScanException __ex(ePos, "Input error.");
    if (!onIOError(__ex))
      abort();
  }
  for (struct t_laCell *p = _laBegin; p != _laEnd; p = p->next)
    p->token->_cacheImg();
  if (_start != _ch) {
    if (_start <= _buffer + _pbsz) {
      int nbsz = _pbsz;
      do { nbsz *= 2; } while (nbsz <= _bsz + _pbsz);
      _bsz = nbsz;
      char *newBuf = new char[_bsz + _pbsz + 1];
      memcpy(newBuf + _pbsz, _start, _ch - _start);
      _bol += newBuf + _pbsz - _start;
      _ch += newBuf + _pbsz - _start;
      _start = newBuf + _pbsz;
      delete[] _buffer;
      _buffer = newBuf;
    } else {
      memmove(_buffer + _pbsz, _start, _ch - _start);
      _bol -= _start - (_buffer + _pbsz);
      _ch = _buffer + _pbsz + (_ch - _start);
      _start = _buffer + _pbsz;
    }
  } else {
    _start = _ch = _buffer + _pbsz;
    _bol = _start;
  }
  inputStream->read(_ch, _bsz - (_ch - (_buffer + _pbsz)));
  _eob = _ch + inputStream->gcount();
  *_eob++  = '\0';
  _eof = inputStream->eof();
  _lta = false;
}

void script_tut::scriptScanner::_binit ()
{
  if (_buffer == NULL) _buffer = new char[_bsz + _pbsz + 1];
  _start = _ch = _eob = _buffer + _pbsz;
  *_eob++  = '\0';
  _eof = inputStream == NULL;
}
void script_tut::scriptScanner::unGetChars (const char *c, int n)
{
  if (_start < _buffer + n) { //grow the buffer
    int npbsz = _pbsz, delta = 0;
    for (struct t_laCell *p = _laBegin; p != _laEnd; p = p->next)
      p->token->_cacheImg();
    if (la0 == _laEnd) la0->token->_cacheImg();
    do { npbsz *= 2; delta = npbsz - _pbsz; } while (delta < n);
    char *newBuf = new char[_bsz + npbsz + 1];
    memcpy(newBuf + delta, _start, _eob - _start + 1);
    _bol += newBuf + delta - _start;
    _ch += newBuf + delta - _start;
    _eob += newBuf + delta - _start;
    _start = newBuf + delta;
    _pbsz = npbsz;
    delete[] _buffer;
    _buffer = newBuf;
  }
  memmove(_start - n, _start, n);
  _ch -= n;
  _start -= n;
  _bol -= n;
  memcpy(_ch, c, n);
}

void script_tut::scriptScanner::_scan (scriptToken *token)
{
  register unsigned char c;
  
  for(;;)
  {
    switch (getState())
    {
    case START:
      __START_0_:
        c = *_ch++;
         /*0*/ if ((c == '\t' /*9*/) || (('\v' /*11*/ <= c) && (c <= '\f' /*12*/)) || (c == ' ' /*32*/))
          goto __START_1_;
        else  /*0*/ if ((c == '\n' /*10*/))
          goto __START_2_;
        else  /*0*/ if ((c == '!' /*33*/))
          goto __START_3_;
        else  /*0*/ if ((c == '"' /*34*/))
          goto __START_4_;
        else  /*0*/ if ((c == '$' /*36*/))
          goto __START_5_;
        else  /*0*/ if ((c == '(' /*40*/))
          goto __START_6_;
        else  /*0*/ if ((c == ')' /*41*/))
          goto __START_7_;
        else  /*0*/ if ((c == '*' /*42*/))
          goto __START_8_;
        else  /*0*/ if ((c == '+' /*43*/))
          goto __START_9_;
        else  /*0*/ if ((c == ',' /*44*/))
          goto __START_10_;
        else  /*0*/ if ((c == '-' /*45*/))
          goto __START_11_;
        else  /*0*/ if ((c == '.' /*46*/))
          goto __START_12_;
        else  /*0*/ if ((c == '/' /*47*/))
          goto __START_13_;
        else  /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)))
          goto __START_14_;
        else  /*0*/ if ((c == ';' /*59*/))
          goto __START_15_;
        else  /*0*/ if ((c == '=' /*61*/))
          goto __START_16_;
        else  /*0*/ if ((c == 'A' /*65*/))
          goto __START_17_;
        else  /*0*/ if ((('B' /*66*/ <= c) && (c <= 'N' /*78*/)) || (('P' /*80*/ <= c) && (c <= 'Z' /*90*/)) || (('a' /*97*/ <= c) && (c <= 'd' /*100*/)) || (('f' /*102*/ <= c) && (c <= 'h' /*104*/)) || (('j' /*106*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        else  /*0*/ if ((c == 'O' /*79*/))
          goto __START_19_;
        else  /*0*/ if ((c == 'e' /*101*/))
          goto __START_20_;
        else  /*0*/ if ((c == 'i' /*105*/))
          goto __START_21_;
        else  /*0*/ if ((c == '{' /*123*/))
          goto __START_22_;
        else  /*0*/ if ((c == '}' /*125*/))
          goto __START_23_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta)goto __unexpected_eof_;
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_0_;
        }
        goto __scan_error_;
      __START_1_:
        goto __accept_token_ws_;
      __START_2_:
        goto __accept_token_eol_;
      __START_3_:
        c = *_ch++;
         /*0*/ if ((c == '=' /*61*/))
          goto __START_24_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta)goto __unexpected_eof_;
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_3_;
        }
        goto __scan_error_;
      __START_4_:
        c = *_ch++;
         /*0*/ if (((c == '\0') && (_ch != _eob)) || (('\1' /*1*/ <= c) && (c <= '!' /*33*/)) || ('#' /*35*/ <= c))
          goto __START_4_;
        else  /*0*/ if ((c == '"' /*34*/))
          goto __START_25_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta)goto __unexpected_eof_;
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_4_;
        }
        goto __scan_error_;
      __START_5_:
        c = *_ch++;
         /*0*/ if ((('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_26_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta)goto __unexpected_eof_;
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_5_;
        }
        goto __scan_error_;
      __START_6_:
        goto __accept_token_L_PAR_;
      __START_7_:
        goto __accept_token_R_PAR_;
      __START_8_:
        goto __accept_token_MULT_;
      __START_9_:
        goto __accept_token_ADD_;
      __START_10_:
        goto __accept_token_COMMA_;
      __START_11_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)))
          goto __START_14_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_SUB_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_11_;
        }
        goto __accept_token_SUB_;
      __START_12_:
        c = *_ch++;
         /*0*/ if ((c == '.' /*46*/))
          goto __START_27_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta)goto __unexpected_eof_;
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_12_;
        }
        goto __scan_error_;
      __START_13_:
        c = *_ch++;
         /*0*/ if ((c == '/' /*47*/))
          goto __START_28_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_DIV_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_13_;
        }
        goto __accept_token_DIV_;
      __START_14_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)))
          goto __START_14_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_DECIMAL_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_14_;
        }
        goto __accept_token_DECIMAL_;
      __START_15_:
        goto __accept_token_SEMICOLON_;
      __START_16_:
        c = *_ch++;
         /*0*/ if ((c == '=' /*61*/))
          goto __START_29_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_ASSIGN_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_16_;
        }
        goto __accept_token_ASSIGN_;
      __START_17_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'M' /*77*/)) || (('O' /*79*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        else  /*0*/ if ((c == 'N' /*78*/))
          goto __START_30_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IDENTIFIER_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_17_;
        }
        goto __accept_token_IDENTIFIER_;
      __START_18_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IDENTIFIER_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_18_;
        }
        goto __accept_token_IDENTIFIER_;
      __START_19_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Q' /*81*/)) || (('S' /*83*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        else  /*0*/ if ((c == 'R' /*82*/))
          goto __START_31_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IDENTIFIER_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_19_;
        }
        goto __accept_token_IDENTIFIER_;
      __START_20_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'k' /*107*/)) || (('m' /*109*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        else  /*0*/ if ((c == 'l' /*108*/))
          goto __START_32_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IDENTIFIER_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_20_;
        }
        goto __accept_token_IDENTIFIER_;
      __START_21_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'e' /*101*/)) || (('g' /*103*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        else  /*0*/ if ((c == 'f' /*102*/))
          goto __START_33_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IDENTIFIER_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_21_;
        }
        goto __accept_token_IDENTIFIER_;
      __START_22_:
        goto __accept_token_L_CURLY_;
      __START_23_:
        goto __accept_token_R_CURLY_;
      __START_24_:
        goto __accept_token_NEQUAL_;
      __START_25_:
        goto __accept_token_STRING_;
      __START_26_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_26_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_VAR_NAME_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_26_;
        }
        goto __accept_token_VAR_NAME_;
      __START_27_:
        goto __accept_token_CONCAT_;
      __START_28_:
        c = *_ch++;
         /*0*/ if (((c == '\0') && (_ch != _eob)) || (('\1' /*1*/ <= c) && (c <= '\t' /*9*/)) || (('\v' /*11*/ <= c) && (c <= '\f' /*12*/)) || ('\16' /*14*/ <= c))
          goto __START_28_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_SHORT_COMMENT_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_28_;
        }
        goto __accept_token_SHORT_COMMENT_;
      __START_29_:
        goto __accept_token_EQUAL_;
      __START_30_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'C' /*67*/)) || (('E' /*69*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        else  /*0*/ if ((c == 'D' /*68*/))
          goto __START_34_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IDENTIFIER_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_30_;
        }
        goto __accept_token_IDENTIFIER_;
      __START_31_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_LOGIC_OR_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_31_;
        }
        goto __accept_token_LOGIC_OR_;
      __START_32_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'r' /*114*/)) || (('t' /*116*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        else  /*0*/ if ((c == 's' /*115*/))
          goto __START_35_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IDENTIFIER_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_32_;
        }
        goto __accept_token_IDENTIFIER_;
      __START_33_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IF_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_33_;
        }
        goto __accept_token_IF_;
      __START_34_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_LOGIC_AND_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_34_;
        }
        goto __accept_token_LOGIC_AND_;
      __START_35_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'd' /*100*/)) || (('f' /*102*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        else  /*0*/ if ((c == 'e' /*101*/))
          goto __START_36_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_IDENTIFIER_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_35_;
        }
        goto __accept_token_IDENTIFIER_;
      __START_36_:
        c = *_ch++;
         /*0*/ if ((('0' /*48*/ <= c) && (c <= '9' /*57*/)) || (('A' /*65*/ <= c) && (c <= 'Z' /*90*/)) || (c == '_' /*95*/) || (('a' /*97*/ <= c) && (c <= 'z' /*122*/)))
          goto __START_18_;
        if ((_ch-- == _eob) && (c == '\0')) {
          if (_eof) {
            if ((_ch != _start) && !_lta){ _lta = true; goto __accept_token_ELSE_; }
            if (!wrap()) goto __eof_seen_;
          }
          if (_ch + 1 == _eob) _brefill();
          goto __START_36_;
        }
        goto __accept_token_ELSE_;
    default:
      {
        ScanException __ex(ePos, "Illegal lexical state");
        if (!onScanError(__ex))
          abort();
      }
    }
    
    __accept_token_ws_:
      ePos.col += _ch - _bol;
      _bol = _ch;
      _start = _ch;
      bPos = ePos;
      continue;
    __accept_token_SHORT_COMMENT_:
      ePos.col += _ch - _bol;
      _bol = _ch;
      _start = _ch;
      bPos = ePos;
      continue;
    __accept_token_eol_:
      ePos.col += _ch - _bol;
      _bol = _ch;
      token->_set(scriptToken::eol, bPos, ePos, _start, _ch - _start);
      { newLine(); 

      }
      _start = _ch;
      bPos = ePos;
      continue;
    __accept_token_IF_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::IF, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_ELSE_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::ELSE, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_L_PAR_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::L_PAR, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_R_PAR_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::R_PAR, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_L_CURLY_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::L_CURLY, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_R_CURLY_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::R_CURLY, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_COMMA_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::COMMA, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_SEMICOLON_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::SEMICOLON, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_ASSIGN_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::ASSIGN, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_EQUAL_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::EQUAL, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_NEQUAL_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::NEQUAL, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_ADD_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::ADD, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_SUB_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::SUB, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_MULT_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::MULT, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_DIV_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::DIV, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_CONCAT_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::CONCAT, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_LOGIC_OR_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::LOGIC_OR, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_LOGIC_AND_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::LOGIC_AND, bPos, ePos, _start, _ch - _start);
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_IDENTIFIER_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::IDENTIFIER, bPos, ePos, _start, _ch - _start);
        { token->identifier = token->image(); 

        }
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_VAR_NAME_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::VAR_NAME, bPos, ePos, _start, _ch - _start);
        { token->varName = token->image(); 

        }
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_DECIMAL_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::DECIMAL, bPos, ePos, _start, _ch - _start);
        { token->intValue = atoi(token->image().c_str()); 

        }
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __accept_token_STRING_:
      {
        ePos.col += _ch - _bol;
        _bol = _ch;
        token->_set(scriptToken::STRING, bPos, ePos, _start, _ch - _start);
        { token->stringValue = token->image(); 

        }
        commonTokenAction (*token);
        bPos = ePos;
        _start = _ch;
        if (_reject) { _reject = false; continue; }
        else return;
      }
    __scan_error_:
      {
        std::string msg = std::string("Unexpected character \'") + (char) c + "\'.";
        ScanException __ex(ePos, msg);
        if (!onScanError(__ex))
          abort();
      }
    __unexpected_eof_:
      {
        std::string msg("Unexpected EOF.");
        ScanException __ex(ePos, msg);
        if (!onScanError(__ex))
          abort();
      }
      __eof_seen_:
        token->id = scriptToken::eof;
        token->bPos = bPos;
        token->ePos = ePos;
        return;
  }
}



/* End of file. */
