import brl.blitz
import "Util_CPB.bmx"
TIdentifier^brl.blitz.Object{
.Datatype:TDatatype&
.Name$&
-New%()="_bb_TIdentifier_New"
-Delete%()="_bb_TIdentifier_Delete"
-Create:TIdentifier(N$,Typ:TDatatype)="_bb_TIdentifier_Create"
-ToNode:bah.libxml.TxmlNode(Infos:brl.linkedlist.TList)="_bb_TIdentifier_ToNode"
}A="bb_TIdentifier"
TIdentifierFunction^TIdentifier{
.Gen@&
.RealName$&
.ParamList:brl.linkedlist.TList&
.UserFunc@&
.Used@&
.Childs:brl.linkedlist.TList&
.OWner:TTypeTemplate&
.Datatypes$&
-New%()="_bb_TIdentifierFunction_New"
-Delete%()="_bb_TIdentifierFunction_Delete"
-use@()="_bb_TIdentifierFunction_use"
-AddParameter%(Name$,DataType:TDatatype,Pre$=$"")="_bb_TIdentifierFunction_AddParameter"
-GenName%()="_bb_TIdentifierFunction_GenName"
-Copy:TIdentifierFunction()="_bb_TIdentifierFunction_Copy"
}="bb_TIdentifierFunction"
TIdentifierVariable^TIdentifier{
.Info:Object&
-New%()="_bb_TIdentifierVariable_New"
-Delete%()="_bb_TIdentifierVariable_Delete"
}="bb_TIdentifierVariable"
TTypeField^TIdentifierVariable{
ISPRIVATE@=1
ISPROTECTED@=2
ISPUBLIC@=3
.Mode%&
-New%()="_bb_TTypeField_New"
-Delete%()="_bb_TTypeField_Delete"
-Create2:TIdentifier(N$,Typ:TDatatype,Mode%)="_bb_TTypeField_Create2"
}="bb_TTypeField"
TTypeMethod^brl.blitz.Object{
ISNORMAL@=0
ISOVERRIDE@=1
ISVIRTUAL@=2
ISABSTRACT@=3
ISFINAL@=4
ISSTATIC@=5
ISPRIVATE@=1
ISPROTECTED@=2
ISPUBLIC@=3
.Mode%&
.State@&
.Func:TIdentifierFunction&
.Name$&
.From:TTypeTemplate&
.VirtualID%&
.OldName$&
-New%()="_bb_TTypeMethod_New"
-Delete%()="_bb_TTypeMethod_Delete"
-Create:TTypeMethod(N$,F:TTypeTemplate,State@=0,Mode@,VirtualID%,OldName$)="_bb_TTypeMethod_Create"
}="bb_TTypeMethod"
TTypeTemplate^brl.blitz.Object{
ObjectTemplate:TTypeTemplate&=mem:p("_bb_TTypeTemplate_ObjectTemplate")
.Mode%&
.Fields:brl.linkedlist.TList&
.Methods:brl.linkedlist.TList&
.Name$&
.SuperType:TTypeTemplate&
.Datatype:TDatatype&
.LastID%&
.VIDMap:brl.map.TMap&
-New%()="_bb_TTypeTemplate_New"
-Delete%()="_bb_TTypeTemplate_Delete"
+Init%()="_bb_TTypeTemplate_Init"
-GetFields:brl.linkedlist.TList(Mode%)="_bb_TTypeTemplate_GetFields"
-GetMethods:brl.linkedlist.TList(Mode%)="_bb_TTypeTemplate_GetMethods"
-AddField%(Name$,Datatype:TDatatype,Pre:bah.libxml.TxmlNode,Mode%)="_bb_TTypeTemplate_AddField"
-AddMethod%(Name$,Datatype:TDatatype,State@,Mode%,OldName$)="_bb_TTypeTemplate_AddMethod"
-ToNode:bah.libxml.TxmlNode()="_bb_TTypeTemplate_ToNode"
}="bb_TTypeTemplate"
TParameter^brl.blitz.Object{
.Name$&
.Datatype:TDatatype&
.Pre$&
.Node:bah.libxml.TxmlNode&
-New%()="_bb_TParameter_New"
-Delete%()="_bb_TParameter_Delete"
-Create:TParameter(Name$,Datatype:TDatatype,Pre$)="_bb_TParameter_Create"
}="bb_TParameter"
TCompiler^brl.blitz.Object{
Current:TCompiler&=mem:p("_bb_TCompiler_Current")
Templates:brl.linkedlist.TList&=mem:p("_bb_TCompiler_Templates")
.Token:brl.linkedlist.TList&
.GlobalVarIdentifier:brl.linkedlist.TList&
.FunctionIdentifier:brl.linkedlist.TList&
.LocalVarIdentifier:brl.linkedlist.TList&[]&
.CurrentMode%&
.CurrentType$&
.Lines$&[]&
.XMLFile:bah.libxml.TxmlDoc&
.CurrentRoot:bah.libxml.TxmlNode&
.CurrentLineNode:bah.libxml.TxmlNode&
.CurrentToken$&
.CurrentLink:brl.linkedlist.TLink&
.CurrentLine%&
.LastFunc:bah.libxml.TxmlNode&
.FUnctionDatatype:TDatatype&
.AnyError@&
.ScopeMode%&
-New%()="_bb_TCompiler_New"
-Delete%()="_bb_TCompiler_Delete"
-LoadFunction%(FilePath$)="_bb_TCompiler_LoadFunction"
-LoadHeaders%(Path$)="_bb_TCompiler_LoadHeaders"
-Tokenizer%(Text$)="_bb_TCompiler_Tokenizer"
-Analyser%()="_bb_TCompiler_Analyser"
-Parser%(DoDefs@=1)="_bb_TCompiler_Parser"
-InternBlock%(Node:bah.libxml.TxmlNode)="_bb_TCompiler_InternBlock"
-Block%()="_bb_TCompiler_Block"
-Expression:TRecursive(Prio%=0)="_bb_TCompiler_Expression"
-Factor:TRecursive()="_bb_TCompiler_Factor"
-Funk:TRecursive(PreParam:bah.libxml.TxmlNode="bbNullObject")="_bb_TCompiler_Funk"
-Keyword:TRecursive()="_bb_TCompiler_Keyword"
-Variable:TRecursive(DoSet@=1)="_bb_TCompiler_Variable"
-ParseType:TRecursive(RecIdent:TRecursive,Pos:brl.linkedlist.TList)="_bb_TCompiler_ParseType"
-ParseArray:brl.linkedlist.TList(Datatype:TDatatype)="_bb_TCompiler_ParseArray"
-RegisterVariable:bah.libxml.TxmlNode(Name$,Datatype:TDatatype)="_bb_TCompiler_RegisterVariable"
-GetVariable:TIdentifierVariable(Name$)="_bb_TCompiler_GetVariable"
-GetVariablelist:brl.linkedlist.TList()="_bb_TCompiler_GetVariablelist"
-IsToken@(Name$)="_bb_TCompiler_IsToken"
-ValidDatatype@(typ$)="_bb_TCompiler_ValidDatatype"
-Match$(Tok$)="_bb_TCompiler_Match"
-GetNext$()="_bb_TCompiler_GetNext"
-GetBefore$()="_bb_TCompiler_GetBefore"
-GetCurrent$()="_bb_TCompiler_GetCurrent"
-Error%(Text$)="_bb_TCompiler_Error"
-Warning%(Text$)="_bb_TCompiler_Warning"
}="bb_TCompiler"
TRecursive^brl.blitz.Object{
.Datatype:TDatatype&
.Node:bah.libxml.TxmlNode&
.Info:Object&
.Positions:Object&
-New%()="_bb_TRecursive_New"
-Delete%()="_bb_TRecursive_Delete"
-Create:TRecursive(Node:bah.libxml.TxmlNode,Typ:TDatatype,Info:Object="bbNullObject",Positions:brl.linkedlist.TList="bbNullObject")="_bb_TRecursive_Create"
-GetDatatype:TDatatype()="_bb_TRecursive_GetDatatype"
-GetNode:bah.libxml.TxmlNode()="_bb_TRecursive_GetNode"
}="bb_TRecursive"
TDatatype^brl.blitz.Object{
IntDatatype:TDatatype&=mem:p("_bb_TDatatype_IntDatatype")
FloatDatatype:TDatatype&=mem:p("_bb_TDatatype_FloatDatatype")
StringDatatype:TDatatype&=mem:p("_bb_TDatatype_StringDatatype")
ByteDatatype:TDatatype&=mem:p("_bb_TDatatype_ByteDatatype")
LongDatatype:TDatatype&=mem:p("_bb_TDatatype_LongDatatype")
DoubleDatatype:TDatatype&=mem:p("_bb_TDatatype_DoubleDatatype")
ShortDatatype:TDatatype&=mem:p("_bb_TDatatype_ShortDatatype")
VoidDatatype:TDatatype&=mem:p("_bb_TDatatype_VoidDatatype")
NullDatatype:TDatatype&=mem:p("_bb_TDatatype_NullDatatype")
UserDefinedDatatypes:brl.linkedlist.TList&=mem:p("_bb_TDatatype_UserDefinedDatatypes")
.IsNotPrimitive@&
.Prio%&
.Name$&
.IsArray%&
.CanCastTo:brl.linkedlist.TList&
-New%()="_bb_TDatatype_New"
-Delete%()="_bb_TDatatype_Delete"
+Init%()="_bb_TDatatype_Init"
+Create:TDatatype(Name$,IsArray%=0)="_bb_TDatatype_Create"
+CreateByNode:TDatatype(Node:bah.libxml.TxmlNode)="_bb_TDatatype_CreateByNode"
-Copy:TDatatype(IsArray%=0)="_bb_TDatatype_Copy"
-Add2Node%(Node:bah.libxml.TxmlNode)="_bb_TDatatype_Add2Node"
-Cast:bah.libxml.TxmlNode(Datatype:TDatatype)="_bb_TDatatype_Cast"
-CastNode:bah.libxml.TxmlNode(Datatype:TDatatype,Node:bah.libxml.TxmlNode)="_bb_TDatatype_CastNode"
-ToString$()="_bb_TDatatype_ToString"
-GetArrayString$()="_bb_TDatatype_GetArrayString"
}="bb_TDatatype"
TOperator^brl.blitz.Object{
Priority:brl.linkedlist.TList&[]&=mem:p("_bb_TOperator_Priority")
.Name$&
.Operator$&
.Datatype:TDatatype&[]&
-New%()="_bb_TOperator_New"
-Delete%()="_bb_TOperator_Delete"
-AddDatatype%(Data:TDatatype)="_bb_TOperator_AddDatatype"
-CanMatch@(Data1:TDatatype,Data2:TDatatype)="_bb_TOperator_CanMatch"
-ParseDatatype:TDatatype(Rec1:TRecursive,Rec2:TRecursive,Node:bah.libxml.TxmlNode)="_bb_TOperator_ParseDatatype"
+Init%()="_bb_TOperator_Init"
+NewOperator%(Prio%,Name$,Operator$,Data:TDatatype&[])="_bb_TOperator_NewOperator"
+GetByName:TOperator(Name$)="_bb_TOperator_GetByName"
}="bb_TOperator"
